\BOOKMARK [1][-]{section.1}{Solving a Dynamic Programming Problem}{}% 1
\BOOKMARK [2][-]{subsection.1.1}{Value Function Iteration}{section.1}% 2
\BOOKMARK [3][-]{subsubsection.1.1.1}{Howard policy improvement}{subsection.1.1}% 3
\BOOKMARK [2][-]{subsection.1.2}{Policy Function Iteration - Method I}{section.1}% 4
\BOOKMARK [3][-]{subsubsection.1.2.1}{Euler equation}{subsection.1.2}% 5
\BOOKMARK [3][-]{subsubsection.1.2.2}{Policy Function Iteration - Method II}{subsection.1.2}% 6
\BOOKMARK [3][-]{subsubsection.1.2.3}{Endogenous Grid Points Method}{subsection.1.2}% 7
\BOOKMARK [3][-]{subsubsection.1.2.4}{Comparing methods}{subsection.1.2}% 8
\BOOKMARK [1][-]{section.2}{Problem 2}{}% 9
\BOOKMARK [2][-]{subsection.2.1}{a\) Stating the problem}{section.2}% 10
\BOOKMARK [2][-]{subsection.2.2}{b\) Computing allocation: Planner's problem}{section.2}% 11
\BOOKMARK [2][-]{subsection.2.3}{c\) Introducing exogenous market incompleteness}{section.2}% 12
\BOOKMARK [1][-]{section.3}{Problem 3}{}% 13
\BOOKMARK [2][-]{subsection.3.1}{a\) Arrow - Debreu Equilibrium}{section.3}% 14
\BOOKMARK [2][-]{subsection.3.2}{b\) Computing allocations: Planner's problem}{section.3}% 15
\BOOKMARK [2][-]{subsection.3.3}{c\) Sequential incomplete market}{section.3}% 16
\BOOKMARK [2][-]{subsection.3.4}{d\) Computing allocation under incomplete market}{section.3}% 17
\BOOKMARK [2][-]{subsection.3.5}{e\) No borrowing constraint}{section.3}% 18
